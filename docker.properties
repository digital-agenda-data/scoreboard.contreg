# The application's display name
application.displayName=Semantic Data Repository

# Home directory of the application's resource files that are needed at run-time.
application.homeDir=/var/local/cr/apphome

# The name of the template JSP file that will be used to give the pages their look and feel.
# Must reside in the webapp's /pages/common/ directory. This must property must not be empty!
templateJsp=templateScoreboard.jsp

# Folder where CR's Access Control Lists (ACL, http://en.wikipedia.org/wiki/Access_control_list) are stored.
application.acl.folder=${application.homeDir}/acl

# The application's home URL. Examples: http://127.0.0.1:8080/cr, http://cr.eionet.europa.eu, http://digital-agenda-data.eu/data
application.homeURL=${HOME_URL}

# Same as application.homeURL.
deployment.host=${application.homeURL}

# Location of the folder where harvester collects its temporary files.
harvester.tempFileDir=${application.homeDir}/tmp

# The clock hours (0-23) when batch harvesting should be active, given as comma separated from-to spans (e.g 10-15, 19-23),
# where in every span both from and to are inclusive and there must be from<=to (so, to say from 18.00 to 9.00 you must write 18-23,0-8)
# (leave completely empty to disable any batch harvesting)
harvester.batchHarvestingHours=

# Interval (in seconds) at which CR checks for new urgent or scheduled harvests.
harvester.batchHarvestingIntervalSeconds=3600

# Upper limit for the number of sources that are harvested in each interval
harvester.batchHarvestingUpperLimit=500

# Default harvesting interval (in minutes) for new auto-detected harvest sources.
harvester.referrals.intervalMinutes=60480

# Standard JavaMail (http://java.sun.com/products/javamail) properties for CR to send e-mail notifications.
# The mail.user and mail.password are not mandatory if the SMTP host does not require authentication.
# To turn off notifications, simply leave "mail.host" empty.
mail.host=
mail.user=
mail.password=
mail.from=cr@localhost

# Comma-separated list of system administrators' e-mails where error notifications should be sent to.
mail.sysAdmins=sysadmin@localhost

# Folder where the application stores uploaded files.
filestore.path=${application.homeDir}/filestore

# Interval (ms) for updating the picklist in Delivery search
#deliverySearchPicklistCacheUpdateInterval=3600000
deliverySearchPicklistCacheUpdateInterval=3600000

# Interval (ms) for updating the cache of recently discovered files.
#recentDiscoveredFilesCacheUpdateInterval=300000
recentDiscoveredFilesCacheUpdateInterval=3600000

# Interval (ms) for updating the cache of distinct rdf:types in CR triple store.
#typeCacheUpdateInterval=3600000
typeCacheUpdateInterval=3600000

# Interval (ms) for updating the tag cloud cache.
#tagCloudCacheUpdateInterval=7200000
tagCloudCacheUpdateInterval=7200000

# Cron schedule for updating rdf:type cache tables in database - this may take more than 15 minutes!
#typeCacheTablesUpdateCronJob=0 30 5 ? * *
typeCacheTablesUpdateCronJob=

# Virtuoso db connection properties.
virtuoso.db.url=jdbc:virtuoso://${DB_HOST}:${DB_PORT}/charset=UTF-8/log_enable=2/DATABASE=CR
virtuoso.db.drv=virtuoso.jdbc4.Driver
virtuoso.db.usr=${DB_USER}
virtuoso.db.pwd=${DB_PASSWORD}

virtuoso.db.rousr=${DB_RO_USER}
virtuoso.db.ropwd=${DB_RO_PASSWORD}

# Database connection properties to be used by unit tests.
virtuoso.unittest.db.url=jdbc:virtuoso://localhost:1113/charset=UTF-8/log_enable=2/DATABASE=CRTEST
virtuoso.unittest.db.usr=dba
virtuoso.unittest.db.pwd=dba

# If true, CR will use a Central Authentication Service (CAS, http://www.jasig.org/cas) for authenticating its users.
# In such a case, the below "edu.yale.its.tp.cas.client.filter.*" properties *must* be specified!
# If false, CR will use an LDAP server and a local user description file for the user authentication.
# In such a case, the LDAP server URL *must* be specified with "ldap.url" property. The local user
# description file is located in users.xml in the directory specified by "application.acl.folder".
# Default value of this property is true, i.e. use CAS for user authentication.
useCentralAuthenticationService=false

# Relevant only if useCentralAuthenticationService=true. Specifies the URL to the login page on CAS server.
# See Java's CAS client JavaDoc for further comments.
edu.yale.its.tp.cas.client.filter.loginUrl=https://ecas.ec.europa.eu/cas/login

# Relevant only if useCentralAuthenticationService=true. Specifies the URL to the validation service on CAS server.
# See Java's CAS client JavaDoc for further comments.
edu.yale.its.tp.cas.client.filter.validateUrl=https://ecas.ec.europa.eu/cas/laxValidate

# Relevant only if useCentralAuthenticationService=true.
# Specifies the host and port to where the CAS login service should redirect the browser after successful login.
# This is basically your CR webapp host and port (examples: "127.0.0.1:8080", "digital-agenda-data.eu").
edu.yale.its.tp.cas.client.filter.serverName=digital-agenda-data.eu

# Relevant only if useCentralAuthenticationService=false. But not mandatory.
# Specifies the URL to your LDAP for user authentication. NB! Must end with a slash! Example: ldap://ldap.eionet.europa.eu:389/
ldap.url=

# Relevant only if useCentralAuthenticationService=false. But not mandatory.
# Specifies the LDAP context where the users shall be looked up. Example: o=Eionet,l=EUROPE
ldap.context=

# Comma-separated list of hosts allowed to use CR's ping API (PingActionBean). Wildcards can be used. Can be left empty.
# The list is always prepended by with "localhost", "127.0.0.1", "0:0:0:0:0:0:0:1" and "::1".
# Example value of this property: *.eea.europa.eu,*.eionet.europa.eu,192.168.1.*
pingWhitelist=

# Name of general Virtuoso rule-set for inferencing. Leave it blank, if you don't know what inferencing is or want it turned off.
virtuoso.cr.ruleset.name=

# The directory where CR should keep the files that will be available for creating staging databases. This property is mandatory
# if you want to use the "staging databases" functionality, otherwise not.
stagingFilesDir=${application.homeDir}/staging

# SPARQL endpoint URL of this CR's own Virtuoso.
self.sparqlEndpointUrl=${SPARQL_ENDPOINT}

# A JSON-formatted array of configuration objects representing migratable other CR instances.
# Every such object must have string properties 'name', 'url', 'migrationPackagesDir'.
migratable.cr.instances=${CR_INSTANCES}

# The name of the client tracking JS file to use.
# The file must reside in the webapp's /scripts directory. Example value: tracking-prod.js
# If left unspecified, no tracking code will be applied!
tracking.js.file=${CR_TRACKING_JS_FILE}