# The application's display name
application.displayName=${application.displayName}

# Home directory of the application's resource files that are needed at run-time.
application.homeDir=${application.homeDir}

# The name of the template JSP file that will be used to give the pages their look and feel.
# Must reside in the webapp's /pages/common/ directory. This must property must not be empty!
templateJsp=${templateJsp}

# indicates the application current version
application.version=3.0

# the User-Agent to expose when doing web crawling
application.userAgent=Content Registry/{0}

# indicates if this is production environment (there might be some extra functions in UI in non-production environment)
environment.production=false

# location of the folder where harvester collects its temporary files
harvester.tempFileDir=${harvester.tempFileDir}

# the clock hours (0-23) when batch harvesting should be active, given as comma separated from-to spans (e.g 10-15, 19-23),
# where in every span both from and to are inclusive and there must be from<=to (so, to say from 18.00 to 9.00 you must write 18-23,0-8)
# (leave completely empty to disable any batch harvesting)
harvester.batchHarvestingHours=${harvester.batchHarvestingHours}

# interval (in seconds) at which CR checks for new urgent or scheduled harvests
harvester.batchHarvestingIntervalSeconds=${harvester.batchHarvestingIntervalSeconds}

# Upper limit for the number of sources that are harvested in each interval
harvester.batchHarvestingUpperLimit=${harvester.batchHarvestingUpperLimit}

# default harvesting interval (in minutes) for new auto-detected harvest sources
harvester.referrals.intervalMinutes=${harvester.referrals.intervalMinutes}

# Maximum content length of harvested sources. If not specified, no limitations to the content length will be applied.
harvester.maximumContentLength=${harvester.maximumContentLength}

# The timeout (in milliseconds) that harvester will feed into java.net.URLConnection's setConnectTimeout() and setReadTimeout()
# when connecting to a source. If no value specified here, the default (3600000 ms) will be applied.
harvester.httpConnection.timeout=${harvester.httpConnection.timeout}

# properties for CR CAS filter configuration
edu.yale.its.tp.cas.client.filter.loginUrl=${edu.yale.its.tp.cas.client.filter.loginUrl}
edu.yale.its.tp.cas.client.filter.validateUrl=${edu.yale.its.tp.cas.client.filter.validateUrl}
edu.yale.its.tp.cas.client.filter.serverName=${edu.yale.its.tp.cas.client.filter.serverName}
edu.yale.its.tp.cas.client.filter.wrapRequest=true

# XmlConv's URL where CR can get the list of conversion for a given schema
xmlconv.listConversions.url=http://converters.eionet.europa.eu/api/listConversions?schema={0}

# The GET request that does the XML-to-RDF conversion
xmlconv.convert.url=http://converters.eionet.europa.eu/api/convert?convert_id={0}&url={1}

# The POST request that does the XML-to-RDF conversion
xmlconv.convertPush.url=http://converters.eionet.europa.eu/api/convertPush

# XmlConv's URL where CR can get a particular conversion's XSL by replacing {0} with the XSL file name
# it receives from xmlconv.listConversions.url in the first place.
xmlconv.xsl.url=http://converters.eionet.europa.eu/xsl/{0}

# Standard JavaMail (http://java.sun.com/products/javamail) properties that CR
# should use for sending error notification e-mails. For a complete reference see page 61 of
# http://java.sun.com/products/javamail/JavaMail-1.4.pdf.
# The mail.user and mail.password are not mandatory if the SMTP host does not require authentication.
# To turn off notifications, simply leave "mail.host" empty.
mail.transport.protocol=smtp
mail.store.protocol=smtp
mail.host=${mail.host}
mail.user=${mail.user}
mail.password=${mail.password}
mail.from=${mail.from}

# The comma-separated list of e-mail addresses of CR system administrators. Error
# notifications will be delivered to those addresses. This is NOT a standard JavaMail property!
mail.sysAdmins=${mail.sysAdmins}

# properties related to ObjectHashesFixer
ObjectHashesFixer.batchSize=1000
ObjectHashesFixer.noOfBatchesToRun=1

# Interval (ms) for updating the picklist in Delivery search.
deliverySearchPicklistCacheUpdateInterval=${deliverySearchPicklistCacheUpdateInterval}

# Interval (ms) for updating the cache of recently discovered files.
recentDiscoveredFilesCacheUpdateInterval=${recentDiscoveredFilesCacheUpdateInterval}

# Interval (ms) for updating the cache of distinct rdf:types in CR triple store.
typeCacheUpdateInterval=${typeCacheUpdateInterval}

# Interval (ms) for updating the tag cloud cache.
tagCloudCacheUpdateInterval=${tagCloudCacheUpdateInterval}

# Cron schedule for updating rdf:type cache tables in database - this may take more than 15 minutes!
typeCacheTablesUpdateCronJob=${typeCacheTablesUpdateCronJob}

# MS-Excel exporter row limit.
exporter.xls.row.limit=3000

# TagCloud length for front page and tag search.
tagcloud.frontpage.size=30
tagcloud.tagsearch.size=1000

# URL that serves as local Virtuoso SPARQL endpoint.
virtuoso.sparql.endpoint=http://localhost:8890/sparql

# Virtuoso db connection properties.
virtuoso.db.drv=${virtuoso.db.drv}
virtuoso.db.url=${virtuoso.db.url}
virtuoso.db.usr=${virtuoso.db.usr}
virtuoso.db.pwd=${virtuoso.db.pwd}

#RO user for Sandbox etc
virtuoso.db.rousr=${virtuoso.db.rousr}
virtuoso.db.ropwd=${virtuoso.db.ropwd}

#General ruleSet name for inferencing. Schema sources are added into that ruleset. Leave it blank, if inferencing is turned off.
virtuoso.cr.ruleset.name=${virtuoso.cr.ruleset.name}

# The application's home URL. It should be a full URL up to the webapp context path (the latter being included).
# Examples:
#    http://127.0.0.1:8080/cr
#    http://cr.eionet.europa.eu
# This property is used to construct URLs of users' home directories. The latter, in turn, is used to construct
# URLs of user's registrations, bookmarks, etc.
application.homeURL=${application.homeURL}

# Full path to the file system folder where CR should store its user-uploaded files
filestore.path=${filestore.path}

# Running interval (milliseconds) of the job that deletes temporary files created by the application.
# Not mandatory. Default values is 20000.
tempFileDeletionJob.interval=10000

# If false, the Central Authentication Service (CAS) is not used, and the properties that
# start with "edu.yale.its.tp.cas.client.filter." are ignored. In such a case, CR uses
# other authentication means provided by the eionetdir.propertis and local users file
# defined in uit.properties. By default the value of this property is true.
useCentralAuthenticationService=${useCentralAuthenticationService}

# Enable EEA specific functionality (true/false)
enableEEAFunctionality=${enableEEAFunctionality}

# Comma-separated list of hosts allowed to use CR's ping API (PingActionBean). Wildcards can be used. Can be left empty.
# The list is always prepended by the application with "localhost" and "127.0.0.1".
pingWhitelist=${pingWhitelist}

# The directory where CR should keep the files that will be available for creating staging databases. This property is mandatory
# if you want to use the "staging databases" functionality, otherwise not.
stagingFilesDir=${stagingFilesDir}

# SPARQL endpoint URL of this CR's own Virtuoso.
self.sparqlEndpointUrl=${self.sparqlEndpointUrl}

# A JSON-formatted array of configuration objects representing migratable other CR instances.
# Every such object must have string properties 'name', 'url', 'migrationPackagesDir'.
migratable.cr.instances=${migratable.cr.instances}

# Full path to the folder where user uploads will be stored.
uploads.dir=${application.homeDir}/uploads
